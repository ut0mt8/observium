<?php

/**
 * Observium
 *
 *   This file is part of Observium.
 *
 * @package    observium
 * @subpackage alerting
 * @copyright  (C) 2006-2013 Adam Armstrong, (C) 2013-2016 Observium Limited
 *
 */

// Find local hostname
$localhost = get_localhost();

$emails = array();

// Generate Mail text in both plain text and html
$message['text'] = simple_template('email_text.tpl', $message_tags, array('is_file' => TRUE));

$message_tags_html = $message_tags;
$message_tags_html['CONDITIONS'] = nl2br($message_tags['CONDITIONS']);
$message_tags_html['METRICS']    = nl2br($message_tags['METRICS']);

$message['html'] = simple_template('email_html.tpl', $message_tags_html, array('is_file' => TRUE));
unset($message_tags_html);

$emails[$endpoint['email']] = $endpoint['contact_descr'];

// Mail backend params
$backend = strtolower(trim($config['email']['backend']));
switch ($backend)
{
  case 'sendmail':
    $params['sendmail_path'] = $config['email']['sendmail_path'];
    break;
  case 'smtp':
    $params['host']      = $config['email']['smtp_host'];
    $params['port']      = $config['email']['smtp_port'];
    if ($config['email']['smtp_secure'] == 'ssl')
    {
      $params['host']    = 'ssl://'.$config['email']['smtp_host'];
      if ($config['email']['smtp_port'] == 25)
      {
        $params['port']  = 465; // Default port for SSL
      }
    }
    $params['timeout']   = $config['email']['smtp_timeout'];
    $params['auth']      = $config['email']['smtp_auth'];
    $params['username']  = $config['email']['smtp_username'];
    $params['password']  = $config['email']['smtp_password'];
    $params['localhost'] = $localhost;
    if (OBS_DEBUG) { $params['debug'] = TRUE; }
    break;
  case 'mail':
  default:
    $backend = 'mail'; // Default mailer backend
}

// Time sent RFC 2822
$time_rfc = date('r', time());

// Mail headers
$headers = array();
if (empty($config['email']['from']))
{
  $config['email']['from'] = 'Observium <observium@'.$localhost.'>'; // Default "From:"
}

foreach (parse_email($config['email']['from']) as $from => $from_name)
{
  $headers['From'] = (empty($from_name) ? $from : '"'.$from_name.'" <'.$from.'>'); // From:
  $headers['Return-Path'] = $from;
  break; // use only first entry
}

$rcpts = array();
$rcpts_full = array();
foreach ($emails as $to => $to_name)
{
  $rcpts_full[] = (empty($to_name) ? $to : '"'.trim($to_name).'" <'.$to.'>');
  $rcpts[]      = $to;
}

$rcpts_full = implode(', ', $rcpts_full);
$rcpts      = implode(', ', $rcpts);

$headers['To']           = $rcpts_full;   // To:
$headers['Subject']      = $title;        // Subject:
// ID and Date, leave it before X- headers
$headers['Message-ID']   = '<' . md5(uniqid(time())) . '@' . $localhost . '>';
$headers['Date']         = $time_rfc;

$headers['X-Priority']   = 3;             // Mail priority
$headers['X-Mailer']     = OBSERVIUM_PRODUCT.' '.OBSERVIUM_VERSION; // X-Mailer:

// Mail autogenerated, suppress autorespond by any issue system
$headers['Precedence']               = 'bulk';
$headers['Auto-submitted']           = 'auto-generated';
$headers['X-Auto-Response-Suppress'] = 'All';

$time_sent = $time_rfc;

// Creating the Mime message
$mime = new Mail_mime(array('head_charset' => 'utf-8',
                            'text_charset' => 'utf-8',
                            'html_charset' => 'utf-8',
                            'eol' => PHP_EOL));

foreach ($message as $part => $part_body)
{
  switch ($part)
  {
    case 'text':
    case 'txt':
    case 'plain':
      $part_body .= "\n\nE-mail sent to: $rcpts\n";
      $part_body .= "E-mail sent at: $time_sent\n\n";
      $part_body .= "-- \n" . OBSERVIUM_PRODUCT_LONG . ' ' . OBSERVIUM_VERSION . "\n" . OBSERVIUM_URL . "\n";
      $mime->setTXTBody($part_body);
      break;
    case 'html':
      $part_footer = "\n<br /><p style=\"font-size: 11px;\">E-mail sent to: $rcpts<br />\n";
      $part_footer .= "E-mail sent at: $time_sent</p>\n";
      $part_footer .= '<div style="font-size: 11px; color: #999;">-- <br /><a href="'.OBSERVIUM_URL.'">'.OBSERVIUM_PRODUCT_LONG.' '.OBSERVIUM_VERSION."</a></div>\n";
      if (stripos($part_body, '</body>'))
      {
        $part_body = str_ireplace('</body>', $part_footer.'</body>', $part_body);
      } else {
        $part_body .= $part_footer;
      }
      $mime->setHTMLBody($part_body);
      break;
    //case 'image':
    //  break;
    //case 'attachment':
    //  break;
  }
}
$body = $mime->get();

// Prepare headers
foreach ($headers as $name => $value)
{
  $headers[$name] = $mime->encodeHeader($name, $value, 'utf-8', 'quoted-printable');
}
$headers = $mime->headers($headers);
//var_dump($headers);

// Create mailer instance
$mail =& Mail::factory($backend, $params);
// Sending email
$status = $mail->send($rcpts, $headers, $body);

if (PEAR::isError($status))
{
  // FIXME error should go into $notify_status
  print_message('%rMailer Error%n: ' . $status->getMessage(), 'color');
  $notify_status['success'] = FALSE;
} else {
  $notify_status['success'] = TRUE;
}

unset($message);

// EOF
